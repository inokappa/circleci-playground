version: 2.1

orbs:
  aws-sg-white-list-circleci-ip: inokappa/aws-sg-white-list-circleci-ip@0.0.3
  aws-cloudwatch-dashboard-annotation: inokappa/aws-cloudwatch-dashboard-annotation@0.0.1

executors:
  default:
    docker:
      - image: docker:19.03.5-git
  aws-sg-white-list-circleci-ip-demo:
    docker:
      - image: cimg/python:3.9
        environment:
          AWS_ACCESS_KEY_ID: EXAMPLEKEY123
          AWS_SECRET_ACCESS_KEY: EXAMPLESECRET123456
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
          AWS_ENDPOINT: http://moto-server:5000
          AWS_DISABLE_SSL: true
      - image: motoserver/moto
        name: moto-server
        command: ["cloudwatch", "-H", "0.0.0.0"]

commands:
  install-awscli:
    steps:
      - run:
          name: Install awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
              unzip awscliv2.zip && \
              sudo ./aws/install

jobs:
  test:
    executor:
      name: default
    steps:
      - run:
          name: Test
          command: |
            echo 'Test'

  build:
    executor:
      name: default
    steps:
      - run:
          name: Build
          command: |
            echo 'Build'

  deploy:
    executor:
      name: default
    steps:
      - run:
          name: Deploy
          command: |
            echo 'Deploy'

  aws-sg-white-list-circleci-ip-demo1:
    environment:
      AWS_PAGER: ''
      GROUP_ID: ''
    executor: aws-sg-white-list-circleci-ip-demo
    steps:
      - checkout
      - install-awscli
      - create-security-group
      - aws-sg-white-list-circleci-ip/add:
          tag-key: 'sg-white-list'
          tag-value: 'true'
          description: 'Test-Permission'
      - check-exists-ip-permission
      - aws-sg-white-list-circleci-ip/del:
          tag-key: 'sg-white-list'
          tag-value: 'true'
          description: 'Test-Permission'
      - check-not-exists-ip-permission

  aws-sg-white-list-circleci-ip-demo2:
    environment:
      AWS_PAGER: ''
      GROUP_ID: ''
    executor: aws-sg-white-list-circleci-ip-demo
    steps:
      - checkout
      - install-awscli
      - create-security-group
      - aws-sg-white-list-circleci-ip/add:
          tag-key: 'sg-white-list'
          tag-value: 'true'
          description: 'Test-Permission'
      - check-exists-ip-permission
      - run:
          name: Command failure
          command: |
            echo 'Command failure.'
            exit 1
      - aws-sg-white-list-circleci-ip/del:
          tag-key: 'sg-white-list'
          tag-value: 'true'
          description: 'Test-Permission'
      - check-not-exists-ip-permission

  aws-cloudwatch-dashboard-annotation-demo1:
    environment:
      AWS_PAGER: ''
    executor: default
    steps:
      - checkout
      - install-awscli
      - run:
          name: Your Deploy Action
          command: |
            echo "Your Deploy Action"
            echo "export DEPLOY_FINISHED_DATETIME=$(date -u '+%Y-%m-%dT%H:%M:%S%z')" >> $BASH_ENV
      - aws-cloudwatch-dashboard-annotation/add:
          dashboard_title: "ECS-dashboard"
          widget_title: "CPUUtilization"
          display_diff: "yes"
          deploy_finished_datetime: ${DEPLOY_FINISHED_DATETIME}

workflows:
  version: 2

  test-only:
    jobs:
      - test:
          filters:
            branches:
              ignore: 
                - master
                - development

  build-after-deploy:
    jobs:
      - build:
          filters:
            branches:
              only: 
                - master
                - development
      - deploy:
          requires:
            - build

  aws-sg-white-list-circleci-ip-demo:
    jobs:
      - aws-sg-white-list-circleci-ip-demo1:
          filters:
            branches:
              only:
                - aws-sg-white-list-circleci-ip-demo
      - aws-sg-white-list-circleci-ip-demo2:
          filters:
            branches:
              only:
                - aws-sg-white-list-circleci-ip-demo

  aws-cloudwatch-dashboard-annotation-demo:
    jobs:
      - aws-cloudwatch-dashboard-annotation-demo1:
          filters:
            branches:
              only:
                - aws-cloudwatch-dashboard-annotation-demo
